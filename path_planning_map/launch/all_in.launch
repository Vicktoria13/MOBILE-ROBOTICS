<?xml version="1.0" ?>
<launch>
   <!-- Lancer l'équivalent de roslaunch minilab_simulation minilab_simulation.launch-->
   <include file="$(find minilab_simulation)/launch/minilab_simulation.launch" >
      <arg name="map" value="buvette" />
   </include>
   <!-- Lancer l'équivalent de rosrun gmapping slam_gmapping-->
   <node name="slam_gmapping" pkg="gmapping" type="slam_gmapping" output="screen"/>

   <!-- Lancer Rviz avec un config file-->
   <node name="rviz" pkg="rviz" type="rviz" args="-d $(find path_planning_map)/config/rviz/pionner_visu.rviz"/>

   <!-- Lancer roslaunch my_teleop command_joystick.launch que si arg teleop a true-->
   <!-- <arg name="teleop" default="false"/>
   <include file="$(find my_teleop)/launch/command_joystick.launch" if="$(arg teleop)"/> -->

   <!-- Lancer l'équivalent de rosrun path_planning_map map_process_node -->
   <!-- <node pkg="path_planning_map" type="map_process_node" name="map_processing" output="screen"/>-->

   <!--
   <node pkg="my_teleop" type="teleop_keyboard.py" name="teleop_clavier" output="screen"/> -->


   <!-- SERVICE POUR LIRE POSITION DU ROBOT SUR UN TOPIC DONNE -->

   <!-- Lancer l'équivalent de  rosrun path_planning_map getPosition_server -->
   <node pkg="path_planning_map" type="getPosition_server" name="getPosition_server" output="screen"> </node>


   <!-- Fais appel au service + lit un PGM et publie dans /trajectory -->
   <node pkg="path_planning_map" type="launch_path_planning" name="Dijstra_test" output="screen">
      <param name="param_file" value="$(find path_planning_map)/config/config.yaml"/>
    </node>

    <!-- Lancer l'équivalent de ==  rosrun path_planning_map occupancy_grid_loader _param_file:=/home/spi-2019/robmob_ws/src/path_planning_map/config/config.yaml-->

    <node pkg="path_planning_map" type="occupancy_grid_loader" name="publish_loaded_map" output="screen">
      <param name="param_file" value="$(find path_planning_map)/config/config.yaml"/>
    </node>


</launch>


